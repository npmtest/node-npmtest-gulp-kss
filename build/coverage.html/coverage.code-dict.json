{"/home/travis/build/npmtest/node-npmtest-gulp-kss/test.js":"/* istanbul instrument in package npmtest_gulp_kss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-kss/lib.npmtest_gulp_kss.js":"/* istanbul instrument in package npmtest_gulp_kss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_kss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_kss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-kss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-kss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_kss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_kss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_kss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_kss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_kss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_kss.__dirname + '/lib.npmtest_gulp_kss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-kss/node_modules/gulp-kss/index.js":"var path = require('path');\nvar fs = require('fs');\n\nvar through = require('through');\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar gulpless = require('gulp-less');\nvar kss = require('kss');\nvar marked = require('marked');\nvar handlebars = require('handlebars');\nvar PluginError = gutil.PluginError;\nvar File = gutil.File;\n\nvar handlebarHelpers = require('./handlebarHelpers');\n\n/*\n    This script is based and recycles a lot of code of the bin script of kss-node\n    https://github.com/hughsk/kss-node/blob/master/bin/kss-node\n */\n\nmodule.exports = function(opt) {\n    'use strict';\n    if (!opt) opt = {};\n    if (!opt.templateDirectory) opt.templateDirectory = __dirname + '/node_modules/kss/lib/template';\n    if (!opt.kssOpts) opt.kssOpts = {};\n\n    var buffer = [];\n    var firstFile = null;\n\n    /* Is called for each file and writes all files to buffer */\n    function bufferContents(file){\n        if (file.isNull()) return; // ignore\n        if (file.isStream()) return this.emit('error', new PluginError('gulp-kss',  'Streaming not supported'));\n\n        if (!firstFile) firstFile = file;\n\n        buffer.push(file.contents.toString('utf8'));\n    }\n\n    /* Is called when all files were added to buffer */\n    function endStream(){\n        var template = fs.readFileSync(path.join(opt.templateDirectory, 'index.html'), 'utf8');\n        template = handlebars.compile(template);\n\n        var self = this;\n\n        kss.parse(buffer, opt.kssOpts, function (err, styleguide) {\n            if (err) console.log('Error', error);\n\n                var sections = styleguide.section('*.'),\n                    i, sectionCount = sections.length,\n                    sectionRoots = [], currentRoot,\n                    rootCount, childSections = [];\n\n\n            // Accumulate all of the sections' first indexes\n            // in case they don't have a root element.\n            for (i = 0; i < sectionCount; i += 1) {\n                currentRoot = sections[i].reference().match(/[0-9]*\\.?/)[0].replace('.', '');\n\n                if (!~sectionRoots.indexOf(currentRoot)) {\n                    sectionRoots.push(currentRoot);\n                }\n            }\n\n            sectionRoots.sort();\n            rootCount = sectionRoots.length;\n\n            handlebarHelpers(handlebars, styleguide);\n\n            // Now, group all of the sections by their root\n            // reference, and make a page for each.\n            for (i = 0; i < rootCount; i += 1) {\n                childSections = styleguide.section(sectionRoots[i]+'.*');\n\n                var content = template({\n                    styleguide: styleguide,\n                    sections: jsonSections(childSections),\n                    rootNumber: sectionRoots[i],\n                    sectionRoots: sectionRoots,\n                    overview: false,\n                    argv: {}\n                });\n\n                var joinedPath = path.join(firstFile.base, 'section-' + sectionRoots[i] + '.html');\n\n                var file = new File({\n                  cwd: firstFile.cwd,\n                  base: firstFile.base,\n                  path: joinedPath,\n                  contents: new Buffer(content)\n                });\n\n                self.emit('data', file);\n            }\n\n            // Generate Overview File\n            if (opt.overview) {\n                gulp.src(opt.overview)\n                    .pipe(through(function (file) {\n\n                        var content = template({\n                            styleguide: styleguide,\n                            sectionRoots: sectionRoots,\n                            sections: jsonSections(childSections),\n                            rootNumber: 0,\n                            argv: {},\n                            overview: marked(file.contents.toString('utf8'), 'utf8')\n                        });\n\n                        var joinedPath = path.join(firstFile.base, 'index.html');\n\n                        var file = new File({\n                            cwd: firstFile.cwd,\n                            base: firstFile.base,\n                            path: joinedPath,\n                            contents: new Buffer(content)\n                        });\n\n                        self.emit('data', file);\n                    }));\n            }\n            // Copy template assets, less compilation added because default template uses it\n            gulp.src(path.join(opt.templateDirectory, '/**/*.less'))\n                .pipe(gulpless())\n                .pipe(through(function (file) {\n\n                self.emit('data', file);\n            }));\n\n            gulp.src(path.join(opt.templateDirectory, '/**/*.js'))\n                .pipe(through(function (file) {\n\n                self.emit('data', file);\n            }));\n\n        });\n\n    }\n\n    function jsonSections(sections) {\n        return sections.map(function(section) {\n            return {\n                header: section.header(),\n                description: section.description(),\n                reference: section.reference(),\n                depth: section.data.refDepth,\n                deprecated: section.deprecated(),\n                experimental: section.experimental(),\n                modifiers: jsonModifiers(section.modifiers())\n            };\n        });\n    }\n\n    // Convert an array of `KssModifier` instances to a JSON object.\n    function jsonModifiers (modifiers) {\n        return modifiers.map(function(modifier) {\n            return {\n                name: modifier.name(),\n                description: modifier.description(),\n                className: modifier.className()\n            };\n        });\n    }\n\n    return through(bufferContents, endStream);\n};","/home/travis/build/npmtest/node-npmtest-gulp-kss/node_modules/gulp-kss/handlebarHelpers.js":"var kss = require('kss')\n\nmodule.exports = function (handlebars, styleguide) {\n    /**\n     * Equivalent to the {#if} block helper with multiple arguments.\n     */\n    handlebars.registerHelper('ifAny', function() {\n        var argLength = arguments.length - 2,\n            content = arguments[argLength + 1],\n            success = true;\n\n        for (var i = 0; i < argLength; i += 1) {\n            if (!arguments[i]) {\n                success = false;\n                break;\n            }\n        }\n\n        return success ? content.fn(this) : content.inverse(this);\n    });\n\n    /**\n     * Returns a single section, found by its reference number\n     * @param  {String|Number} reference The reference number to search for.\n     */\n    handlebars.registerHelper('section', function(reference) {\n        var section = styleguide.section(reference);\n        if (!section) return false;\n\n        return arguments[arguments.length-1](section.data);\n    });\n\n    /**\n     * Loop over a section query. If a number is supplied, will convert into\n     * a query for all children and descendants of that reference.\n     * @param  {Mixed} query The section query\n     */\n    handlebars.registerHelper('eachSection', function(query) {\n        var sections,\n            i, l, buffer = \"\";\n        query = (typeof query === 'string') ? query : query.toString();\n\n        if (!query.match(/x|\\*/g)) {\n            query = new RegExp('^' + query + '$|^' + query + \"\\\\..*\");\n        }\n        sections = styleguide.section(query);\n\n        if (!sections) return '';\n\n        l = sections.length;\n        for (i = 0; i < l; i += 1) {\n            buffer += arguments[arguments.length-1].fn(sections[i].data);\n        }\n\n        return buffer;\n    });\n\n    /**\n     * Loop over each section root, i.e. each section only one level deep.\n     */\n    handlebars.registerHelper('eachRoot', function() {\n        var sections,\n            i, l, buffer = \"\";\n\n        sections = styleguide.section('x');\n        if (!sections) return '';\n\n        l = sections.length;\n        for (i = 0; i < l; i += 1) {\n            buffer += arguments[arguments.length-1].fn(sections[i].data);\n        }\n\n        return buffer;\n    });\n\n    /**\n     * Equivalent to \"if the current section is X levels deep\". e.g:\n     *\n     * {{#refDepth 1}}\n     *   ROOT ELEMENTS ONLY\n     *  {{else}}\n     *   ANYTHING ELSE\n     * {{/refDepth}}\n     */\n    handlebars.registerHelper('whenDepth', function(depth, context) {\n        if (!(context && this.refDepth)) {\n            return '';\n        }\n        if (depth == this.refDepth) {\n            return context.fn(this);\n        }\n        if (context.inverse) {\n            return context.inverse(this);\n        }\n    });\n\n    /**\n     * Similar to the {#eachSection} helper, however will loop over each modifier\n     * @param  {Object} section Supply a section object to loop over it's modifiers. Defaults to the current section.\n     */\n    handlebars.registerHelper('eachModifier', function(section) {\n        var modifiers, i, l, buffer = '';\n\n        // Default to current modifiers, but allow supplying a custom section\n        if (section.data) modifiers = section.data.modifiers;\n        modifiers = modifiers || this.modifiers || false;\n\n        if (!modifiers) return {};\n\n        l = modifiers.length;\n        for (i = 0; i < l; i++) {\n            buffer += arguments[arguments.length-1].fn(modifiers[i].data || '');\n        }\n        return buffer;\n    });\n\n    /**\n     * Outputs a modifier's markup, if possible.\n     * @param  {Object} modifier Specify a particular modifier object. Defaults to the current modifier.\n     */\n    handlebars.registerHelper('modifierMarkup', function(modifier) {\n        modifier = arguments.length < 2 ? this : modifier || this || false;\n\n        if (!modifier) {\n            return false;\n        }\n\n        // Maybe it's actually a section?\n        if (modifier.modifiers) {\n            return new handlebars.SafeString(\n                modifier.markup\n            );\n        }\n\n        // Otherwise return the modifier markup\n        return new handlebars.SafeString(\n            new kss.KssModifier(modifier).markup()\n        );\n    });\n\n    /**\n     * Quickly avoid escaping strings\n     * @param  {String} arg The unescaped HTML\n     */\n    handlebars.registerHelper('html', function(arg) {\n        return new handlebars.SafeString(arg || '');\n    });\n\n    return handlebars;\n};"}